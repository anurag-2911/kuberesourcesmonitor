From the path kuberesourcesmonitor/charts run the commands

1. Lint the Helm Chart @ folder charts:
    helm lint kuberesourcesmonitor
2. Dry Run the Helm Chart Installation:
    helm install kuberm --dry-run --debug kuberesourcesmonitor
3. Install the Helm Chart:
    helm install kuberm kuberesourcesmonitor
    
    kubectl create namespace kuberesourcesmonitor
    helm upgrade --install krm kuberesourcesmonitor --namespace kuberesourcesmonitor --set global.prometheusReleaseLabel=kube-prometheus-stack

4. Verify the Installation:
    kubectl get all -n 

5. helm uninstall:
    helm uninstall kuberm

6. To install the resources in custom namespace,for example: kuberesourcesmonitor-system:
    kubectl create namespace kuberesourcesmonitor-system
    helm install kuberm ./kuberesourcesmonitor --namespace kuberesourcesmonitor-system
    helm uninstall kuberm ./kuberesourcesmonitor --namespace kuberesourcesmonitor-system

Adding helm chart to public repo:

1. Create a public repo in github "helm-charts"
2. git clone https://github.com/<username>/helm-charts.git
3. git checkout --orphan gh-pages
4. copy kuberesourcesmonitor-0.1.0.tgz by running /kuberesourcesmonitor/charts$ helm package kuberesourcesmonitor/ to helm-charts$ 
5. helm repo index . in helm-charts$ 
6. push tha changes to remote origin.(git push origin gh-pages)
7. Enable GitHub Pages
   Go to the settings of the GitHub repository on GitHub, 
   scroll down to the "GitHub Pages" section, and select the gh-pages branch as the source.

8. Access the Helm Chart Repository
   Once GitHub Pages is enabled, Helm repository will be available at,for example, https://anurag-2911.github.io/helm-charts/index.yaml.
   

Install helm from public repo
1.helm repo add kuberm https://anurag-2911.github.io/helm-charts/
2.helm repo update
3.helm install my-monitoring kuberm/kuberesourcesmonitor
4.uninstall :
    helm uninstall my-monitoring
5.Install the Helm Chart in a Specific Namespace
    kubectl create namespace kuberesourcesmonitor-system
    helm install kubemntr kuberm/kuberesourcesmonitor --namespace kuberesourcesmonitor-system
    verify: 
    kubectl get all -n kuberesourcesmonitor-system
    uninstall:
    helm uninstall kubemntr --namespace kuberesourcesmonitor-system
    kubectl delete namespace kuberesourcesmonitor-system

    List the helm chart:
    helm list --namespace kuberesourcesmonitor-system

6. Port forward the requests and verify that the controller is updating the metrics to the end point
    kubectl get pods -n kuberesourcesmonitor-system
    for example:
    kubectl port-forward pod/kuberesourcesmonitor-kubemntr-f6847f6fd-kmj5q 8080:2112 -n kuberesourcesmonitor-system

    verify:
    http://localhost:8080/metrics

7. helm upgrade --install <release-name> <chart-path> --namespace <namespace>
   in the path charts 
   helm upgrade --install <release-name> <chart-path> --namespace <namespace>

    kubectl get prometheus -n monitoring -o yaml
    apiVersion: v1
    items:
    - apiVersion: monitoring.coreos.com/v1
    kind: Prometheus
    metadata:
        annotations:
        meta.helm.sh/release-name: kube-prometheus-stack ## this name ServiceMonitor label

8. To dynamically set the `prometheusReleaseLabel` in your Helm chart based on the existing Prometheus release name

    Steps to Set the Prometheus Release Name Dynamically

    Retrieve the Prometheus Release Name: Use `kubectl` to get the release name from the Prometheus resource.
    kubectl get prometheus -n monitoring -o yaml

    Pass the Release Name to Helm: Use the `--set` flag with Helm to pass this release name as a value.

    Example Helm Command

    Suppose the retrieved Prometheus release name is `kube-prometheus-stack`. You can set this value when installing or upgrading your Helm chart like this:

    kubectl create namespace kuberesourcesmonitor
    helm upgrade --install krm kuberesourcesmonitor --namespace kuberesourcesmonitor --set global.prometheusReleaseLabel=kube-prometheus-stack



    Automating the Process (Optional)

    PROMETHEUS_RELEASE=$(kubectl get prometheus -n monitoring -o jsonpath='{.items[0].metadata.annotations.meta\.helm\.sh/release-name}')
    helm upgrade --install <release-name> <chart-path> \
  --namespace <namespace> \
  --set global.prometheusReleaseLabel=$PROMETHEUS_RELEASE




